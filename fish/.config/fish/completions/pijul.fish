complete -c pijul -n "__fish_use_subcommand" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_use_subcommand" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_use_subcommand" -f -a "log" -d 'List the patches applied to the given branch'
complete -c pijul -n "__fish_use_subcommand" -f -a "info" -d 'Get information about the current repository, if any'
complete -c pijul -n "__fish_use_subcommand" -f -a "init" -d 'Create a new repository'
complete -c pijul -n "__fish_use_subcommand" -f -a "record" -d 'record changes in the repository'
complete -c pijul -n "__fish_use_subcommand" -f -a "unrecord" -d 'Unrecord some patches (remove them without reverting them)'
complete -c pijul -n "__fish_use_subcommand" -f -a "add" -d 'add a file to the repository'
complete -c pijul -n "__fish_use_subcommand" -f -a "pull" -d 'pull from a remote repository'
complete -c pijul -n "__fish_use_subcommand" -f -a "push" -d 'push to a remote repository'
complete -c pijul -n "__fish_use_subcommand" -f -a "apply" -d 'apply a patch'
complete -c pijul -n "__fish_use_subcommand" -f -a "clone" -d 'clone a remote branch'
complete -c pijul -n "__fish_use_subcommand" -f -a "remove" -d 'remove file from the repository'
complete -c pijul -n "__fish_use_subcommand" -f -a "mv" -d 'Change file names'
complete -c pijul -n "__fish_use_subcommand" -f -a "ls" -d 'list tracked files'
complete -c pijul -n "__fish_use_subcommand" -f -a "revert" -d 'Rewrite the working copy from the pristine'
complete -c pijul -n "__fish_use_subcommand" -f -a "patch" -d 'Output a patch'
complete -c pijul -n "__fish_use_subcommand" -f -a "fork" -d 'Create a new branch'
complete -c pijul -n "__fish_use_subcommand" -f -a "branches" -d 'List all branches'
complete -c pijul -n "__fish_use_subcommand" -f -a "delete-branch" -d 'Delete a branch in the local repository'
complete -c pijul -n "__fish_use_subcommand" -f -a "checkout" -d 'Change the current branch'
complete -c pijul -n "__fish_use_subcommand" -f -a "diff" -d 'show what would be recorded if record were called'
complete -c pijul -n "__fish_use_subcommand" -f -a "credit" -d 'Show what patch introduced each line of a file.'
complete -c pijul -n "__fish_use_subcommand" -f -a "dist" -d 'Produces a tar.gz archive of the repository'
complete -c pijul -n "__fish_use_subcommand" -f -a "key" -d 'Manage signing and SSH keys'
complete -c pijul -n "__fish_use_subcommand" -f -a "rollback" -d 'Create a patch with the inverse effects on the working copy of another patch.'
complete -c pijul -n "__fish_use_subcommand" -f -a "status" -d 'Show working tree status'
complete -c pijul -n "__fish_use_subcommand" -f -a "show-dependencies" -d 'Print the patch dependencies using the DOT syntax in stdout'
complete -c pijul -n "__fish_use_subcommand" -f -a "tag" -d 'create a patch (a "tag") with no changes, and all currently applied patches as dependencies'
complete -c pijul -n "__fish_use_subcommand" -f -a "sign" -d 'add patch signatures'
complete -c pijul -n "__fish_use_subcommand" -f -a "challenge" -d 'Prove ownership of a signature key'
complete -c pijul -n "__fish_use_subcommand" -f -a "generate-completions" -d 'generate shell completions for pijul to stdout'
complete -c pijul -n "__fish_use_subcommand" -f -a "help" -d 'Prints this message or the help of the given subcommand(s)'
complete -c pijul -n "__fish_seen_subcommand_from log" -l repository -d 'Path to the repository to list.'
complete -c pijul -n "__fish_seen_subcommand_from log" -l branch -d 'The branch to list.'
complete -c pijul -n "__fish_seen_subcommand_from log" -l internal-id -d 'Display only patches with these internal identifiers.'
complete -c pijul -n "__fish_seen_subcommand_from log" -l grep -d 'Search patch name and description with a regular expression.'
complete -c pijul -n "__fish_seen_subcommand_from log" -l hash-only -d 'Only display the hash of each path.'
complete -c pijul -n "__fish_seen_subcommand_from log" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from log" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from info" -l from-inode -d 'Inode to start the graph from.'
complete -c pijul -n "__fish_seen_subcommand_from info" -l debug -d 'Pijul info will be given about this directory.'
complete -c pijul -n "__fish_seen_subcommand_from info" -s a
complete -c pijul -n "__fish_seen_subcommand_from info" -l exclude-parents
complete -c pijul -n "__fish_seen_subcommand_from info" -s f -d 'show only folder edges'
complete -c pijul -n "__fish_seen_subcommand_from info" -l introducedby
complete -c pijul -n "__fish_seen_subcommand_from info" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from info" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from init" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from init" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from record" -l depends-on -d 'Add a dependency to this patch (internal id or hash accepted)'
complete -c pijul -n "__fish_seen_subcommand_from record" -l repository -d 'The repository where to record, defaults to the current directory.'
complete -c pijul -n "__fish_seen_subcommand_from record" -l branch -d 'The branch where to record, defaults to the current branch.'
complete -c pijul -n "__fish_seen_subcommand_from record" -l date -d 'The date to use to record the patch, default is now.'
complete -c pijul -n "__fish_seen_subcommand_from record" -s m -l message -d 'The name of the patch to record'
complete -c pijul -n "__fish_seen_subcommand_from record" -s d -l description -d 'The description of the patch to record'
complete -c pijul -n "__fish_seen_subcommand_from record" -s A -l author -d 'Author of this patch (multiple occurrences allowed)'
complete -c pijul -n "__fish_seen_subcommand_from record" -s a -l all -d 'Answer \'y\' to all questions'
complete -c pijul -n "__fish_seen_subcommand_from record" -s n -l add-new-files -d 'Offer to add files that have been created since the last record'
complete -c pijul -n "__fish_seen_subcommand_from record" -l no-editor -d 'Do not use an editor to write the patch name and description, even if the variable is set in the configuration file'
complete -c pijul -n "__fish_seen_subcommand_from record" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from record" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from unrecord" -l repository -d 'Local repository.'
complete -c pijul -n "__fish_seen_subcommand_from unrecord" -l branch -d 'Branch.'
complete -c pijul -n "__fish_seen_subcommand_from unrecord" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from unrecord" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from add" -l repository -d 'Add the files to this repository. Defaults to the repository containing the current directory.'
complete -c pijul -n "__fish_seen_subcommand_from add" -l recursive -d 'Add repositories recursively.'
complete -c pijul -n "__fish_seen_subcommand_from add" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from add" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from pull" -l repository -d 'Repository to list.'
complete -c pijul -n "__fish_seen_subcommand_from pull" -l from-branch -d 'The branch to pull from. Defaults to master.'
complete -c pijul -n "__fish_seen_subcommand_from pull" -l to-branch -d 'The branch to pull into. Defaults to the current branch.'
complete -c pijul -n "__fish_seen_subcommand_from pull" -l set-remote
complete -c pijul -n "__fish_seen_subcommand_from pull" -s p -l port -d 'Port of the remote ssh server.'
complete -c pijul -n "__fish_seen_subcommand_from pull" -s a -l all -d 'Answer \'y\' to all questions'
complete -c pijul -n "__fish_seen_subcommand_from pull" -l set-default -d 'Used with --set-remote, sets this remote as the default pull remote.'
complete -c pijul -n "__fish_seen_subcommand_from pull" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from pull" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from push" -l repository -d 'Repository to list.'
complete -c pijul -n "__fish_seen_subcommand_from push" -l from-branch -d 'The branch to push from'
complete -c pijul -n "__fish_seen_subcommand_from push" -l to-branch -d 'The branch to push into. Defaults to the current branch.'
complete -c pijul -n "__fish_seen_subcommand_from push" -l set-remote -d 'Set the name of this remote'
complete -c pijul -n "__fish_seen_subcommand_from push" -s p -l port -d 'Port of the remote ssh server.'
complete -c pijul -n "__fish_seen_subcommand_from push" -s a -l all -d 'Answer \'y\' to all questions'
complete -c pijul -n "__fish_seen_subcommand_from push" -l set-default -d 'Used with --set-remote, sets this remote as the default push target.'
complete -c pijul -n "__fish_seen_subcommand_from push" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from push" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from apply" -l repository -d 'Path to the repository where the patches will be applied. Defaults to the repository containing the current directory.'
complete -c pijul -n "__fish_seen_subcommand_from apply" -l branch -d 'The branch to which the patches will be applied. Defaults to the current branch.'
complete -c pijul -n "__fish_seen_subcommand_from apply" -l no-output -d 'Only apply the patch, don\'t output it to the repository.'
complete -c pijul -n "__fish_seen_subcommand_from apply" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from apply" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from clone" -l from-branch -d 'The branch to pull from'
complete -c pijul -n "__fish_seen_subcommand_from clone" -l to-branch -d 'The branch to pull into'
complete -c pijul -n "__fish_seen_subcommand_from clone" -s p -l port -d 'Port of the remote ssh server.'
complete -c pijul -n "__fish_seen_subcommand_from clone" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from clone" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from remove" -l repository -d 'Repository to remove files from.'
complete -c pijul -n "__fish_seen_subcommand_from remove" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from remove" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from mv" -l repository -d 'Repository where the files are.'
complete -c pijul -n "__fish_seen_subcommand_from mv" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from mv" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from ls" -l repository -d 'Repository to list.'
complete -c pijul -n "__fish_seen_subcommand_from ls" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from ls" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from revert" -l repository -d 'Local repository.'
complete -c pijul -n "__fish_seen_subcommand_from revert" -l branch -d 'Branch to revert to.'
complete -c pijul -n "__fish_seen_subcommand_from revert" -s a -l all -d 'Answer \'y\' to all questions'
complete -c pijul -n "__fish_seen_subcommand_from revert" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from revert" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from patch" -l repository -d 'Path to the repository where the patches will be applied.'
complete -c pijul -n "__fish_seen_subcommand_from patch" -l bin -d 'Output the patch in binary.'
complete -c pijul -n "__fish_seen_subcommand_from patch" -l name -d 'Output the patch name.'
complete -c pijul -n "__fish_seen_subcommand_from patch" -l description -d 'Output the patch description.'
complete -c pijul -n "__fish_seen_subcommand_from patch" -l authors -d 'Output the patch authors.'
complete -c pijul -n "__fish_seen_subcommand_from patch" -l date -d 'Output the patch date.'
complete -c pijul -n "__fish_seen_subcommand_from patch" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from patch" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from fork" -l repository -d 'Local repository.'
complete -c pijul -n "__fish_seen_subcommand_from fork" -l branch -d 'Branch.'
complete -c pijul -n "__fish_seen_subcommand_from fork" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from fork" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from branches" -l repository -d 'Path to a pijul repository. Defaults to the repository containing the current directory.'
complete -c pijul -n "__fish_seen_subcommand_from branches" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from branches" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from delete-branch" -l repository -d 'Local repository.'
complete -c pijul -n "__fish_seen_subcommand_from delete-branch" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from delete-branch" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from checkout" -l repository -d 'Local repository.'
complete -c pijul -n "__fish_seen_subcommand_from checkout" -s f -l force -d 'Only check files moves, deletions and additions (much faster).'
complete -c pijul -n "__fish_seen_subcommand_from checkout" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from checkout" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from diff" -l repository -d 'The repository to show, defaults to the current directory.'
complete -c pijul -n "__fish_seen_subcommand_from diff" -l branch -d 'The branch to show, defaults to the current branch.'
complete -c pijul -n "__fish_seen_subcommand_from diff" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from diff" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from credit" -l repository -d 'Local repository.'
complete -c pijul -n "__fish_seen_subcommand_from credit" -l branch -d 'The branch to annotate, defaults to the current branch.'
complete -c pijul -n "__fish_seen_subcommand_from credit" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from credit" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from dist" -s d -d 'File name of the output archive.'
complete -c pijul -n "__fish_seen_subcommand_from dist" -l branch -d 'The branch from which to make the archive, defaults to the current branch.'
complete -c pijul -n "__fish_seen_subcommand_from dist" -l repository -d 'Repository where to work.'
complete -c pijul -n "__fish_seen_subcommand_from dist" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from dist" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from key" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from key" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from key" -f -a "upload" -d 'Upload keys to a remote server'
complete -c pijul -n "__fish_seen_subcommand_from key" -f -a "gen" -d 'Generate keys. If neither --ssh nor --signing is given, both key types are generated.'
complete -c pijul -n "__fish_seen_subcommand_from key" -f -a "help" -d 'Prints this message or the help of the given subcommand(s)'
complete -c pijul -n "__fish_seen_subcommand_from upload" -s p -l port -d 'Port of the SSH server.'
complete -c pijul -n "__fish_seen_subcommand_from upload" -l repository -d 'The repository where the signing key is, if the key was generated with --for-repository.'
complete -c pijul -n "__fish_seen_subcommand_from upload" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from upload" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from gen" -l for-repository -d 'Save keys for the given repository only'
complete -c pijul -n "__fish_seen_subcommand_from gen" -l ssh -d 'Generate an SSH key'
complete -c pijul -n "__fish_seen_subcommand_from gen" -l signing -d 'Generate a signing key'
complete -c pijul -n "__fish_seen_subcommand_from gen" -l local -d 'Save keys for the local repository only'
complete -c pijul -n "__fish_seen_subcommand_from gen" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from gen" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from help" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from help" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from rollback" -l repository -d 'Local repository.'
complete -c pijul -n "__fish_seen_subcommand_from rollback" -l branch -d 'Branch.'
complete -c pijul -n "__fish_seen_subcommand_from rollback" -l date -d 'The date to use to create the patch, default is now.'
complete -c pijul -n "__fish_seen_subcommand_from rollback" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from rollback" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from status" -l repository -d 'Local repository.'
complete -c pijul -n "__fish_seen_subcommand_from status" -l branch -d 'The branch to output, defaults to the current branch.'
complete -c pijul -n "__fish_seen_subcommand_from status" -s s -l short -d 'Output in short format'
complete -c pijul -n "__fish_seen_subcommand_from status" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from status" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from show-dependencies" -l depth -d 'The depth of the dependencies graph'
complete -c pijul -n "__fish_seen_subcommand_from show-dependencies" -l repository -d 'Local repository.'
complete -c pijul -n "__fish_seen_subcommand_from show-dependencies" -l branch -d 'Branch.'
complete -c pijul -n "__fish_seen_subcommand_from show-dependencies" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from show-dependencies" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from tag" -l repository -d 'The repository where to record, defaults to the current directory.'
complete -c pijul -n "__fish_seen_subcommand_from tag" -l branch -d 'The branch where to record, defaults to the current branch.'
complete -c pijul -n "__fish_seen_subcommand_from tag" -s m -l message -d 'The name of the patch to record'
complete -c pijul -n "__fish_seen_subcommand_from tag" -s A -l author -d 'Author of this patch (multiple occurrences allowed)'
complete -c pijul -n "__fish_seen_subcommand_from tag" -l no-editor -d 'Do not use an editor to write the patch name and description, even if the variable is set in the configuration file'
complete -c pijul -n "__fish_seen_subcommand_from tag" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from tag" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from sign" -l repository -d 'Path to the repository where the patches will be applied. Defaults to the repository containing the current directory.'
complete -c pijul -n "__fish_seen_subcommand_from sign" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from sign" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from challenge" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from challenge" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from generate-completions" -l bash -d 'Completions for Bash'
complete -c pijul -n "__fish_seen_subcommand_from generate-completions" -l zsh -d 'Completions for Zsh'
complete -c pijul -n "__fish_seen_subcommand_from generate-completions" -l fish -d 'Completions for Fish'
complete -c pijul -n "__fish_seen_subcommand_from generate-completions" -l powershell -d 'Completions for Powershell'
complete -c pijul -n "__fish_seen_subcommand_from generate-completions" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from generate-completions" -s V -l version -d 'Prints version information'
complete -c pijul -n "__fish_seen_subcommand_from help" -s h -l help -d 'Prints help information'
complete -c pijul -n "__fish_seen_subcommand_from help" -s V -l version -d 'Prints version information'

